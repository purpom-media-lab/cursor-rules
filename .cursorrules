# プロジェクト開発ルール

このドキュメントは、プロジェクト開発における標準的なルールと指針を定義します。全ての開発作業はこれらのルールに従って進めてください。

## 1. 開発の基本原則

### 1.1 段階的開発フローの徹底遵守

- `.cursor/flow/developmentFlow.md` に定義された開発フローに厳密に従って開発を進める
- 各フェーズは原則として順番に実施し、前のフェーズの成果物を次のフェーズのインプットとする
- フェーズの順序：
  1. 要件ヒアリング
  2. 必要機能・画面の洗い出し
  3. 技術選定・アーキテクチャ選定
  4. 画面ごとに機能仕様書の作成
  5. 画面ごとにテストケースの作成
  6. デザインシステムの構築
  7. TDDで実装
  8. 結合テストとE2Eテスト
  9. デプロイと運用

### 1.2 ユーザー対話型開発の実践

- 各開発フェーズにおいて、ユーザーとの対話を通じて要件や仕様を詰めていく
- 各フェーズの開始時には、そのフェーズで決めるべき事項をユーザーに明確に説明する
- フェーズごとに必要な質問リストを事前に準備し、体系的に情報を収集する
- フィードバックループを確立し、各フェーズの成果物について合意を得る

### 1.3 品質管理

- テスト駆動開発（TDD）の採用によるコード品質の確保
- 各フェーズでの成果物の品質基準を明確に定義
- コードレビューの徹底
- 継続的なパフォーマンス監視

### 1.4 ドキュメント管理

- 決定事項の文書化と共有
- プロジェクト進捗の継続的な追跡
- 成果物の関連付けと追跡可能性の確保

## 2. プロジェクト構造

### 2.1 メモリバンク(.cursor)の構成

```
.cursor/
├── memory/                # プロジェクトの記憶
│   ├── progress.md        # 進捗状況の記録
│   ├── activeContext.md   # 現在の開発コンテキスト
│   ├── summary.md         # プロジェクト全体の要約と重要ポイント
│   └── productContext.md  # プロダクトの背景情報と全体像
├── flow/
│   └── developmentFlow.md # 開発フロー定義
├── questions_template.md  # 各フェーズの質問リストテンプレート
├── requirements/          # 要件定義関連
│   ├── product/           # プロダクト全体の要件
│   │   ├── overview.md    # プロダクト概要
│   │   ├── userStories.md # ユーザーストーリー
│   │   ├── scope.md       # プロジェクトスコープ
│   │   └── glossary.md    # 用語集
│   ├── functional/        # 機能要件
│   └── non-functional/    # 非機能要件
└── rules/                 # 開発ルール
    ├── systemPattern.md   # システムパターン定義
    ├── designSystem.md    # デザインシステム定義
    ├── implementationGuide.md # 実装ガイドライン
    └── testingStrategy.md # テスト戦略
```

### 2.2 プロジェクトのルートディレクトリ構造

```
project-root/
├── .cursor/              # 開発ナレッジベース
├── docs/                 # プロジェクトドキュメント
│   ├── architecture/     # アーキテクチャドキュメント
│   └── api/              # API仕様書
├── specs/                # 画面・機能仕様書
│   ├── template.md       # 仕様書テンプレート
│   ├── common/           # 共通コンポーネントの仕様
│   └── pages/            # 画面ごとの仕様書
├── tests/                # テスト関連
│   ├── testcases/        # テストケース定義
│   │   ├── template.md   # テストケーステンプレート
│   │   ├── common/       # 共通コンポーネントのテストケース
│   │   └── pages/        # 画面ごとのテストケース
│   └── e2e/              # E2Eテスト関連
└── src/                  # ソースコード（実装時に作成）
```

## 3. 成果物作成ルール

### 3.1 要件ドキュメント

- **プロダクト全体の要件** (.cursor/requirements/product/)
  - overview.md: プロダクトの概要、目的、対象ユーザー、主要機能
  - userStories.md: ユーザーストーリー一覧
  - scope.md: プロジェクトのスコープと制約条件
  - glossary.md: プロジェクト固有の用語の定義

- **機能要件** (.cursor/requirements/functional/)
  - 機能ごとに個別のMDファイルを作成
  - 要件ID、優先度、説明、受け入れ基準、関連ユーザーストーリーを記載

- **非機能要件** (.cursor/requirements/non-functional/)
  - カテゴリ別にMDファイルを作成（性能、セキュリティなど）
  - 要件ID、優先度、説明、目標値、測定方法を記載

### 3.2 仕様書

- 画面ごとに `specs/pages/[画面名]/spec.md` として作成
- 共通コンポーネントは `specs/common/[コンポーネント名].md` として作成
- 必須記載項目：
  - 画面名/機能名
  - 目的と概要
  - UI要素の詳細
  - 振る舞いとインタラクション
  - エラー状態と対応
  - 画面遷移
  - APIリクエスト/レスポンス

### 3.3 テストケース

- 画面ごとに `tests/testcases/pages/[画面名]/testcases.md` として作成
- 共通コンポーネントは `tests/testcases/common/[コンポーネント名].md` として作成
- 必須記載項目：
  - テストID
  - テスト名
  - 前提条件
  - テスト手順
  - 期待される結果
  - 優先度

## 4. ユーザーとの対話プロセス

### 4.1 各フェーズでの対話フレームワーク

- **要件ヒアリング**
  - 質問例：「このプロダクトで解決したい問題は何ですか？」「主要なユーザーは誰ですか？」
  - 成果物：プロダクト概要、ユーザーストーリー、プロジェクトスコープ
  - 質問リスト：`.cursor/questions_template.md` の要件ヒアリングフェーズセクションを参照

- **機能・画面の洗い出し**
  - 質問例：「ユーザーがこの目的を達成するには、どのような手順が必要ですか？」
  - 成果物：機能一覧、画面フロー図、機能要件、非機能要件

- **技術選定・アーキテクチャ選定**
  - 質問例：「特に重視する非機能要件は何ですか？」「将来的な拡張性についてどう考えていますか？」
  - 成果物：技術スタック定義、アーキテクチャ図、データモデル

- **機能仕様書作成**
  - 質問例：「この画面でユーザーが行いたい主な操作は何ですか？」「エラー時にはどのような対応が必要ですか？」
  - 成果物：画面仕様書、ワイヤーフレーム/モックアップ

- **テストケース作成**
  - 質問例：「どのような条件でエラーが発生する可能性がありますか？」「特に重点的にテストすべき機能は何ですか？」
  - 成果物：テストケース一覧

### 4.2 対話の進め方

1. フェーズの目的と決めるべき事項を明確に説明
2. 事前に準備した質問リストをベースに情報収集
3. 抽象的な回答には具体例や状況を質問して詳細化
4. 意思決定が必要な場合は選択肢とそれぞれのメリット・デメリットを提示
5. 決定事項を文書化し確認を得る
6. フィードバックを反映して更新し再確認

### 4.3 対話の記録

- ユーザーとの対話内容は `memory/activeContext.md` に記録
- 重要な決定事項は `memory/progress.md` に記録
- 対話から得られた要件や仕様の変更は対応するファイルに反映

## 5. プロジェクト進捗管理

### 5.1 進捗状況の追跡

- 現在の開発フェーズと進捗状況を `memory/progress.md` に記録
- 各フェーズの開始日・完了日・ステータスを明記
- 次のアクションを明確に定義

### 5.2 開発コンテキストの管理

- 現在のフォーカス、最近の活動、現在の課題を `memory/activeContext.md` に記録
- 重要な意思決定内容と理由を記録
- 次のアクションを具体的に列挙
- プロダクトの背景情報と全体像を `memory/productContext.md` に記録
- プロジェクト全体の要約と重要ポイントを `memory/summary.md` に記録し、定期的に更新

### 5.3 メモリの参照と更新ルール

- **タスク開始時**：activeContext.mdとprogress.mdを参照し現状を把握
- **タスク実行中**：重要な発見や決定をメモし、適宜関連ファイルを更新
- **タスク完了時**：progress.mdとactiveContext.mdを更新し、次のステップを明記
- **継続的管理**：メモリ情報を最新かつ正確に保ち、開発フローとの整合性を確認

## 6. 重要なリファレンス

全ての開発活動において、以下のドキュメントを参照してください：

- **開発フロー**：`.cursor/flow/developmentFlow.md`
- **現在の進捗**：`.cursor/memory/progress.md`
- **開発コンテキスト**：`.cursor/memory/activeContext.md`
- **システムパターン**：`.cursor/rules/systemPattern.md`
- **デザインシステム**：`.cursor/rules/designSystem.md`
- **実装ガイドライン**：`.cursor/rules/implementationGuide.md`
- **テスト戦略**：`.cursor/rules/testingStrategy.md`

